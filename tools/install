#!/bin/bash

# TinyCTI Installation Script
# Usage: ./tools/install [options]

set -e

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
INSTALL_DIR="/opt/tinycti"
SYSTEMD_SERVICE="/etc/systemd/system/tinycti.service"
USER="tinycti"
GROUP="tinycti"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log() { echo -e "${BLUE}[$(date +'%H:%M:%S')]${NC} $1"; }
success() { echo -e "${GREEN}✅ $1${NC}"; }
warning() { echo -e "${YELLOW}⚠️  $1${NC}"; }
error() { echo -e "${RED}❌ $1${NC}"; }

show_help() {
    cat << EOF
TinyCTI Installation Script

USAGE:
    sudo ./tools/install [OPTIONS]

OPTIONS:
    --user-install     Install for current user only (no system integration)
    --dev              Development installation (symlinks instead of copy)
    --uninstall        Uninstall TinyCTI
    --help             Show this help

INSTALLATION TYPES:
    System Install     Install to /opt/tinycti with systemd service
    User Install       Install to ~/.local/tinycti for current user
    Dev Install        Development setup with symlinks

EXAMPLES:
    sudo ./tools/install                # System installation
    ./tools/install --user-install      # User installation
    ./tools/install --dev               # Development setup
    sudo ./tools/install --uninstall    # Remove system installation

EOF
}

check_requirements() {
    log "Checking system requirements..."
    
    # Check Python
    if ! command -v python3 &> /dev/null; then
        error "Python 3 is required"
        exit 1
    fi
    
    local python_version=$(python3 -c "import sys; print(f'{sys.version_info.major}.{sys.version_info.minor}')")
    log "Python version: $python_version"
    
    if ! python3 -c "import sys; sys.exit(0 if sys.version_info >= (3,8) else 1)"; then
        error "Python 3.8+ is required (found: $python_version)"
        exit 1
    fi
    
    # Check pip
    if ! command -v pip3 &> /dev/null && ! python3 -m pip --version &> /dev/null; then
        error "pip is required"
        exit 1
    fi
    
    success "Requirements OK"
}

create_user() {
    log "Creating tinycti user..."
    
    if id "$USER" &>/dev/null; then
        log "User $USER already exists"
        return 0
    fi
    
    useradd --system --shell /bin/false --home-dir /var/lib/tinycti --create-home "$USER" || {
        error "Failed to create user $USER"
        exit 1
    }
    
    success "User $USER created"
}

install_system() {
    log "Installing TinyCTI system-wide..."
    
    # Check if running as root
    if [ "$EUID" -ne 0 ]; then
        error "System installation requires root privileges. Run with sudo."
        exit 1
    fi
    
    create_user
    
    # Create installation directory
    mkdir -p "$INSTALL_DIR"
    mkdir -p /var/log/tinycti
    mkdir -p /var/lib/tinycti
    mkdir -p /etc/tinycti
    
    # Copy files
    log "Copying files to $INSTALL_DIR..."
    cp -r "$PROJECT_ROOT"/* "$INSTALL_DIR/"
    
    # Set ownership
    chown -R "$USER:$GROUP" "$INSTALL_DIR"
    chown -R "$USER:$GROUP" /var/log/tinycti
    chown -R "$USER:$GROUP" /var/lib/tinycti
    chown -R "$USER:$GROUP" /etc/tinycti
    
    # Set permissions
    chmod +x "$INSTALL_DIR/bin/tinycti"
    chmod +x "$INSTALL_DIR/tools/tinycti-daemon"
    chmod +x "$INSTALL_DIR/tools/generate-password"
    
    # Install Python dependencies
    log "Installing Python dependencies..."
    pip3 install -r "$INSTALL_DIR/requirements.txt"
    
    # Copy configuration
    if [ ! -f "/etc/tinycti/config.yaml" ]; then
        cp "$INSTALL_DIR/config.yaml" /etc/tinycti/config.yaml
        log "Configuration copied to /etc/tinycti/config.yaml"
    else
        warning "Configuration already exists at /etc/tinycti/config.yaml"
    fi
    
    # Create systemd service
    create_systemd_service
    
    # Create symlinks
    ln -sf "$INSTALL_DIR/bin/tinycti" /usr/local/bin/tinycti
    ln -sf "$INSTALL_DIR/tools/tinycti-daemon" /usr/local/bin/tinycti-daemon
    ln -sf "$INSTALL_DIR/tools/generate-password" /usr/local/bin/tinycti-generate-password
    
    success "System installation completed"
    
    echo ""
    log "Next steps:"
    echo "  1. Edit configuration: sudo nano /etc/tinycti/config.yaml"
    echo "  2. Validate config: tinycti --validate-config"
    echo "  3. Start service: sudo systemctl start tinycti"
    echo "  4. Enable on boot: sudo systemctl enable tinycti"
    echo "  5. Check status: sudo systemctl status tinycti"
}

install_user() {
    log "Installing TinyCTI for current user..."
    
    local user_dir="$HOME/.local/tinycti"
    local config_dir="$HOME/.config/tinycti"
    
    # Create directories
    mkdir -p "$user_dir"
    mkdir -p "$config_dir"
    mkdir -p "$HOME/.local/bin"
    
    # Copy files
    log "Copying files to $user_dir..."
    cp -r "$PROJECT_ROOT"/* "$user_dir/"
    
    # Set permissions
    chmod +x "$user_dir/bin/tinycti"
    chmod +x "$user_dir/tools/tinycti-daemon"
    chmod +x "$user_dir/tools/generate-password"
    
    # Install Python dependencies for user
    log "Installing Python dependencies..."
    pip3 install --user -r "$user_dir/requirements.txt"
    
    # Copy configuration
    if [ ! -f "$config_dir/config.yaml" ]; then
        cp "$user_dir/config.yaml" "$config_dir/config.yaml"
        log "Configuration copied to $config_dir/config.yaml"
    fi
    
    # Create symlinks
    ln -sf "$user_dir/bin/tinycti" "$HOME/.local/bin/tinycti"
    ln -sf "$user_dir/tools/tinycti-daemon" "$HOME/.local/bin/tinycti-daemon"
    ln -sf "$user_dir/tools/generate-password" "$HOME/.local/bin/tinycti-generate-password"
    
    success "User installation completed"
    
    echo ""
    log "Next steps:"
    echo "  1. Add ~/.local/bin to PATH: export PATH=\"\$HOME/.local/bin:\$PATH\""
    echo "  2. Edit configuration: nano $config_dir/config.yaml"
    echo "  3. Validate config: tinycti --validate-config"
    echo "  4. Start TinyCTI: tinycti --daemon"
}

install_dev() {
    log "Setting up development environment..."
    
    # Install Python dependencies
    log "Installing Python dependencies..."
    pip3 install -r "$PROJECT_ROOT/requirements.txt"
    
    # Install development dependencies
    log "Installing development dependencies..."
    pip3 install pytest pytest-cov pytest-xdist pytest-mock requests-mock black flake8 mypy bandit safety
    
    # Make scripts executable
    chmod +x "$PROJECT_ROOT/bin/tinycti"
    chmod +x "$PROJECT_ROOT/tools"/*
    chmod +x "$PROJECT_ROOT/scripts"/*
    
    # Create symlinks in local bin (if it exists)
    if [ -d "$HOME/.local/bin" ]; then
        ln -sf "$PROJECT_ROOT/bin/tinycti" "$HOME/.local/bin/tinycti"
        ln -sf "$PROJECT_ROOT/tools/tinycti-daemon" "$HOME/.local/bin/tinycti-daemon"
        ln -sf "$PROJECT_ROOT/tools/generate-password" "$HOME/.local/bin/tinycti-generate-password"
    fi
    
    success "Development environment ready"
    
    echo ""
    log "Development setup complete!"
    echo "  - Run tests: ./scripts/test"
    echo "  - Start TinyCTI: python3 tinycti.py"
    echo "  - Validate config: python3 tinycti.py --validate-config"
    echo "  - Format code: make format"
}

create_systemd_service() {
    log "Creating systemd service..."
    
    cat > "$SYSTEMD_SERVICE" << EOF
[Unit]
Description=TinyCTI - Cyber Threat Intelligence Framework
Documentation=https://github.com/your-org/tinycti
After=network.target

[Service]
Type=simple
User=$USER
Group=$GROUP
WorkingDirectory=$INSTALL_DIR
ExecStart=$INSTALL_DIR/bin/tinycti --daemon
ExecReload=/bin/kill -HUP \$MAINPID
Restart=always
RestartSec=10
StandardOutput=journal
StandardError=journal
SyslogIdentifier=tinycti

# Security settings
NoNewPrivileges=true
PrivateTmp=true
ProtectSystem=strict
ProtectHome=true
ReadWritePaths=/var/log/tinycti /var/lib/tinycti /etc/tinycti

# Environment
Environment=PYTHONPATH=$INSTALL_DIR
Environment=TINYCTI_CONFIG=/etc/tinycti/config.yaml

[Install]
WantedBy=multi-user.target
EOF
    
    systemctl daemon-reload
    
    success "Systemd service created"
}

uninstall_system() {
    log "Uninstalling TinyCTI system installation..."
    
    # Check if running as root
    if [ "$EUID" -ne 0 ]; then
        error "System uninstallation requires root privileges. Run with sudo."
        exit 1
    fi
    
    # Stop and disable service
    if systemctl is-active --quiet tinycti; then
        log "Stopping TinyCTI service..."
        systemctl stop tinycti
    fi
    
    if systemctl is-enabled --quiet tinycti; then
        log "Disabling TinyCTI service..."
        systemctl disable tinycti
    fi
    
    # Remove systemd service
    if [ -f "$SYSTEMD_SERVICE" ]; then
        rm -f "$SYSTEMD_SERVICE"
        systemctl daemon-reload
    fi
    
    # Remove symlinks
    rm -f /usr/local/bin/tinycti
    rm -f /usr/local/bin/tinycti-daemon
    rm -f /usr/local/bin/tinycti-generate-password
    
    # Remove installation directory
    if [ -d "$INSTALL_DIR" ]; then
        log "Removing installation directory..."
        rm -rf "$INSTALL_DIR"
    fi
    
    # Remove logs (optional)
    read -p "Remove log files? [y/N] " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        rm -rf /var/log/tinycti
    fi
    
    # Remove data (optional)
    read -p "Remove data files? [y/N] " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        rm -rf /var/lib/tinycti
    fi
    
    # Remove config (optional)
    read -p "Remove configuration? [y/N] " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        rm -rf /etc/tinycti
    fi
    
    # Remove user (optional)
    read -p "Remove tinycti user? [y/N] " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        userdel "$USER"
    fi
    
    success "TinyCTI uninstalled"
}

main() {
    local user_install=false
    local dev_install=false
    local uninstall=false
    
    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            --user-install)
                user_install=true
                shift
                ;;
            --dev)
                dev_install=true
                shift
                ;;
            --uninstall)
                uninstall=true
                shift
                ;;
            --help|-h)
                show_help
                exit 0
                ;;
            *)
                error "Unknown option: $1"
                show_help
                exit 1
                ;;
        esac
    done
    
    # Show banner
    echo -e "${BLUE}"
    cat << "EOF"
 _____ _            ____ _____ ___ 
|_   _(_)_ __  _   / ___|_   _|_ _|
  | | | | '_ \| | | |     | |  | | 
  | | | | | | | |_| |___  | |  | | 
  |_| |_|_| |_|\__, \____| |_| |___|
               |___/               
        Installation
EOF
    echo -e "${NC}"
    
    check_requirements
    
    if [[ "$uninstall" == "true" ]]; then
        uninstall_system
    elif [[ "$user_install" == "true" ]]; then
        install_user
    elif [[ "$dev_install" == "true" ]]; then
        install_dev
    else
        install_system
    fi
}

main "$@"