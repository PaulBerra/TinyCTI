name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans daily at 3 AM UTC
    - cron: '0 3 * * *'

permissions:
  contents: read
  security-events: write

jobs:
  # CodeQL Analysis
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        language: [ 'python' ]
        
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        config-file: ./.github/codeql/codeql-config.yml
        
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2
      
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  # Dependency Scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety pip-audit
        
    - name: Run Safety check
      run: |
        safety check --json --output safety-report.json
        safety check --short-report
      continue-on-error: true
      
    - name: Run pip-audit
      run: |
        pip-audit --format=json --output=pip-audit-report.json
        pip-audit --format=cyclonedx-json --output=sbom.json
      continue-on-error: true
      
    - name: Upload dependency scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: dependency-scan-results
        path: |
          safety-report.json
          pip-audit-report.json
          sbom.json

  # SAST Scanning
  sast-scan:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install SAST tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit semgrep
        
    - name: Run Bandit security scan
      run: |
        bandit -r . -f json -o bandit-report.json
        bandit -r . -f txt -o bandit-report.txt
      continue-on-error: true
      
    - name: Run Semgrep security scan
      run: |
        semgrep --config=auto --json --output=semgrep-report.json .
        semgrep --config=auto --sarif --output=semgrep-results.sarif .
      continue-on-error: true
      
    - name: Upload SARIF results to GitHub
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: semgrep-results.sarif
        
    - name: Upload SAST scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: sast-scan-results
        path: |
          bandit-report.json
          bandit-report.txt
          semgrep-report.json
          semgrep-results.sarif

  # Secret Scanning
  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up TruffleHog
      run: |
        curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin
        
    - name: Run TruffleHog secret scan
      run: |
        trufflehog git file://. --json --no-update > trufflehog-report.json
      continue-on-error: true
      
    - name: Run detect-secrets
      run: |
        pip install detect-secrets
        detect-secrets scan --all-files --baseline .secrets.baseline
        detect-secrets audit .secrets.baseline
      continue-on-error: true
      
    - name: Upload secret scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: secret-scan-results
        path: |
          trufflehog-report.json
          .secrets.baseline

  # License Compliance
  license-check:
    name: License Compliance Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install license checking tools
      run: |
        python -m pip install --upgrade pip
        pip install pip-licenses licensecheck
        
    - name: Check licenses
      run: |
        pip install -r requirements.txt
        pip-licenses --format=json --output-file=licenses-report.json
        pip-licenses --format=csv --output-file=licenses-report.csv
        pip-licenses --summary
        
    - name: License compatibility check
      run: |
        # Check for GPL licenses that might conflict
        pip-licenses | grep -i gpl || echo "No GPL licenses found"
        
    - name: Upload license check results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: license-check-results
        path: |
          licenses-report.json
          licenses-report.csv

  # Docker Security Scan
  docker-security:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image for security scan
      run: |
        docker build -t tinycti:security-scan .
      continue-on-error: true
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'tinycti:security-scan'
        format: 'sarif'
        output: 'trivy-results.sarif'
      continue-on-error: true
      
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Run Docker Bench Security
      run: |
        docker run --rm --net host --pid host --userns host --cap-add audit_control \
          -e DOCKER_CONTENT_TRUST=$DOCKER_CONTENT_TRUST \
          -v /etc:/etc:ro \
          -v /usr/bin/containerd:/usr/bin/containerd:ro \
          -v /usr/bin/runc:/usr/bin/runc:ro \
          -v /usr/lib/systemd:/usr/lib/systemd:ro \
          -v /var/lib:/var/lib:ro \
          -v /var/run/docker.sock:/var/run/docker.sock:ro \
          --label docker_bench_security \
          docker/docker-bench-security > docker-bench-results.txt
      continue-on-error: true
      
    - name: Upload Docker security results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: docker-security-results
        path: |
          trivy-results.sarif
          docker-bench-results.txt

  # Infrastructure Security
  infrastructure-security:
    name: Infrastructure Security Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check for security configurations
      run: |
        # Check for security-related configurations
        echo "Checking for security configurations..."
        
        # Check if HTTPS is enforced in configs
        grep -r "https" . --include="*.yml" --include="*.yaml" --include="*.json" || echo "No HTTPS configurations found"
        
        # Check for authentication configurations
        grep -r "auth" . --include="*.yml" --include="*.yaml" --include="*.json" || echo "No auth configurations found"
        
        # Check for logging configurations
        grep -r "log" . --include="*.yml" --include="*.yaml" --include="*.json" || echo "No logging configurations found"
        
    - name: Validate configuration security
      run: |
        echo "Validating configuration security..."
        
        # Check for hardcoded secrets in config files
        find . -name "*.yml" -o -name "*.yaml" -o -name "*.json" | xargs grep -l "password\|secret\|key\|token" || echo "No hardcoded secrets in configs"
        
        # Check for secure defaults
        echo "Configuration security check completed"

  # Compliance Report
  compliance-report:
    name: Generate Compliance Report
    runs-on: ubuntu-latest
    needs: [codeql, dependency-scan, sast-scan, secret-scan, license-check]
    if: always()
    
    steps:
    - name: Download all scan results
      uses: actions/download-artifact@v3
      
    - name: Generate compliance summary
      run: |
        echo "# Security Compliance Report" > compliance-report.md
        echo "Generated on: $(date)" >> compliance-report.md
        echo "" >> compliance-report.md
        
        echo "## Scan Results Summary" >> compliance-report.md
        echo "- CodeQL: ${{ needs.codeql.result }}" >> compliance-report.md
        echo "- Dependency Scan: ${{ needs.dependency-scan.result }}" >> compliance-report.md
        echo "- SAST Scan: ${{ needs.sast-scan.result }}" >> compliance-report.md
        echo "- Secret Scan: ${{ needs.secret-scan.result }}" >> compliance-report.md
        echo "- License Check: ${{ needs.license-check.result }}" >> compliance-report.md
        echo "" >> compliance-report.md
        
        echo "## Recommendations" >> compliance-report.md
        echo "- Review all HIGH and CRITICAL severity findings" >> compliance-report.md
        echo "- Update dependencies with known vulnerabilities" >> compliance-report.md
        echo "- Ensure no secrets are committed to repository" >> compliance-report.md
        echo "- Verify license compatibility" >> compliance-report.md
        
    - name: Upload compliance report
      uses: actions/upload-artifact@v3
      with:
        name: compliance-report
        path: compliance-report.md

  # Security Notification
  security-notify:
    name: Security Notifications
    runs-on: ubuntu-latest
    needs: [compliance-report]
    if: always() && (needs.codeql.result == 'failure' || needs.dependency-scan.result == 'failure' || needs.sast-scan.result == 'failure')
    
    steps:
    - name: Security alert
      run: |
        echo "🚨 SECURITY ALERT: One or more security scans have detected issues!"
        echo "Please review the scan results and take appropriate action."
        echo ""
        echo "Scan Results:"
        echo "- CodeQL: ${{ needs.codeql.result }}"
        echo "- Dependency Scan: ${{ needs.dependency-scan.result }}"
        echo "- SAST Scan: ${{ needs.sast-scan.result }}"
        echo "- Secret Scan: ${{ needs.secret-scan.result }}"
        echo "- License Check: ${{ needs.license-check.result }}"