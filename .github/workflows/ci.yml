name: TinyCTI CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.9'
  
jobs:
  # Code Quality Checks
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install black flake8 mypy bandit safety
        
    - name: Code formatting check (Black)
      run: black --check --diff .
      
    - name: Linting (Flake8)
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      
    - name: Type checking (MyPy)
      run: mypy tinycti.py --ignore-missing-imports
      continue-on-error: true
      
    - name: Security scan (Bandit)
      run: bandit -r . -f json -o bandit-report.json
      continue-on-error: true
      
    - name: Dependency security check (Safety)
      run: safety check --json --output safety-report.json
      continue-on-error: true
      
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Unit Tests
  test-unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-xdist pytest-mock
        
    - name: Run unit tests
      run: |
        pytest tests/unit/ \
          --cov=tinycti \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          --junitxml=pytest-unit.xml \
          -v \
          --tb=short \
          -n auto
          
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: unit-test-results-${{ matrix.python-version }}
        path: |
          pytest-unit.xml
          htmlcov/

  # Integration Tests
  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test-unit
    
    services:
      # Redis for testing caching (if implemented)
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-xdist requests-mock
        
    - name: Run integration tests
      run: |
        pytest tests/integration/ \
          --cov=tinycti \
          --cov-append \
          --cov-report=xml \
          --junitxml=pytest-integration.xml \
          -v \
          --tb=short \
          -m "not slow"
          
    - name: Run slow integration tests
      run: |
        pytest tests/integration/ \
          --junitxml=pytest-integration-slow.xml \
          -v \
          --tb=short \
          -m "slow"
      continue-on-error: true
          
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: |
          pytest-integration.xml
          pytest-integration-slow.xml

  # Performance Tests
  test-performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: test-unit
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-benchmark memory-profiler
        
    - name: Run performance tests
      run: |
        pytest tests/ \
          -k "performance or benchmark" \
          --benchmark-json=benchmark.json \
          -v
      continue-on-error: true
          
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-results
        path: benchmark.json

  # Security Tests
  test-security:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest safety bandit semgrep
        
    - name: Run security-focused tests
      run: |
        pytest tests/ \
          -k "security or auth" \
          --junitxml=pytest-security.xml \
          -v
          
    - name: Advanced security scan (Semgrep)
      run: |
        python -m semgrep --config=auto --json --output=semgrep-report.json .
      continue-on-error: true
          
    - name: Upload security test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-test-results
        path: |
          pytest-security.xml
          semgrep-report.json

  # Docker Build and Test
  test-docker:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: test-unit
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      run: |
        docker build -t tinycti:test .
      continue-on-error: true
      
    - name: Test Docker image
      run: |
        docker run --rm tinycti:test python -c "import tinycti; print('TinyCTI import successful')"
      continue-on-error: true

  # Documentation Build
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install documentation dependencies
      run: |
        python -m pip install --upgrade pip
        pip install sphinx sphinx-rtd-theme sphinx-autodoc-typehints
        
    - name: Build documentation
      run: |
        mkdir -p docs
        sphinx-quickstart -q -p "TinyCTI" -a "TinyCTI Team" --ext-autodoc --ext-viewcode docs/
        sphinx-build -b html docs/ docs/_build/
      continue-on-error: true
        
    - name: Upload documentation
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: documentation
        path: docs/_build/

  # Deployment (only on main branch)
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [quality, test-unit, test-integration]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        
    - name: Build package
      run: python -m build
      
    - name: Check package
      run: twine check dist/*
      
    - name: Upload to Test PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
      run: twine upload --repository testpypi dist/*
      continue-on-error: true

  # Release Notes
  release-notes:
    name: Generate Release Notes
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [deploy]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Generate changelog
      run: |
        echo "# Changelog" > CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "## $(date +%Y-%m-%d)" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        git log --oneline --since="24 hours ago" >> CHANGELOG.md
        
    - name: Upload changelog
      uses: actions/upload-artifact@v3
      with:
        name: changelog
        path: CHANGELOG.md

  # Notification
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [quality, test-unit, test-integration, test-security]
    if: always()
    
    steps:
    - name: Notify success
      if: ${{ needs.quality.result == 'success' && needs.test-unit.result == 'success' && needs.test-integration.result == 'success' }}
      run: |
        echo "✅ All tests passed successfully!"
        echo "Quality: ${{ needs.quality.result }}"
        echo "Unit Tests: ${{ needs.test-unit.result }}"
        echo "Integration Tests: ${{ needs.test-integration.result }}"
        echo "Security Tests: ${{ needs.test-security.result }}"
        
    - name: Notify failure
      if: ${{ needs.quality.result == 'failure' || needs.test-unit.result == 'failure' || needs.test-integration.result == 'failure' }}
      run: |
        echo "❌ Some tests failed!"
        echo "Quality: ${{ needs.quality.result }}"
        echo "Unit Tests: ${{ needs.test-unit.result }}"
        echo "Integration Tests: ${{ needs.test-integration.result }}"
        echo "Security Tests: ${{ needs.test-security.result }}"
        exit 1