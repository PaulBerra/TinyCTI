#!/usr/bin/env python3
"""
TinyCTI Password Hash Generator
Usage: generate-password [password]
"""

import getpass
import sys

import bcrypt


def generate_hash(password: str) -> str:
    """Generate bcrypt hash for a password"""
    salt = bcrypt.gensalt()
    return bcrypt.hashpw(password.encode('utf-8'), salt).decode('utf-8')


def main():
    print("TinyCTI Password Hash Generator")
    print("=" * 35)
    
    if len(sys.argv) > 1:
        password = sys.argv[1]
        print("‚ö†Ô∏è  Warning: Password provided via command line (visible in process list)")
    else:
        password = getpass.getpass("Enter password: ")
        confirm = getpass.getpass("Confirm password: ")
        
        if password != confirm:
            print("‚ùå Passwords do not match!")
            sys.exit(1)
    
    if not password:
        print("‚ùå Password cannot be empty!")
        sys.exit(1)
    
    if len(password) < 6:
        print("‚ö†Ô∏è  Warning: Password is very short (less than 6 characters)")
    
    print("\nGenerating hash...")
    hash_value = generate_hash(password)
    
    print(f"\n‚úÖ Password hash generated:")
    print(f"   {hash_value}")
    
    print(f"\nüìù Add this to your config.yaml:")
    print(f"   authentication:")
    print(f"     users:")
    print(f"       your_username:")
    print(f"         password_hash: \"{hash_value}\"")
    print(f"         role: admin")
    
    # Test the hash
    print(f"\nüß™ Testing hash...")
    if bcrypt.checkpw(password.encode('utf-8'), hash_value.encode('utf-8')):
        print("   ‚úÖ Hash verification successful!")
    else:
        print("   ‚ùå Hash verification failed!")
        sys.exit(1)


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ùå Cancelled by user")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Error: {e}")
        sys.exit(1)